name: RustSpray CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      OPENCV_PKGCONFIG_NAME: opencv4

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install host deps + native OpenCV for clippy/tests
      - name: Install host packages
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            llvm-dev clang libclang-dev \
            libopencv-dev pkg-config \
            qemu-user-static binfmt-support

      # 3Ô∏è‚É£ Rust toolchain
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy,rustfmt

      # 4Ô∏è‚É£ Cache crates
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo git
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      # 5Ô∏è‚É£ Lint, fmt & tests
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Format check
        run: cargo fmt -- --check
      - name: Unit tests
        run: cargo test --all-targets --all-features

      # 6Ô∏è‚É£ Install cross
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.4

      # 7Ô∏è‚É£ Cross-build for Raspberry Pi
      - name: Cross-build for aarch64
        run: cross build --release --target aarch64-unknown-linux-gnu

      # üîü Upload the Pi binary
      - name: Upload Pi binary
        uses: actions/upload-artifact@v4
        with:
          name: rustspray-aarch64
          path: target/aarch64-unknown-linux-gnu/release/rustspray
