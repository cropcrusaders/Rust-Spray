name: RustSpray CI

# Trigger the workflow on push or pull request to the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define the job
jobs:
  build-and-test:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up the Rust toolchain with the ARM target
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-unknown-linux-gnu
        override: true

    # Step 3: Install system dependencies for OpenCV and cross-compilation
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          libopencv-dev \
          libclang-dev \
          clang

    # Step 4: Cache Rust dependencies to speed up builds
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    # Step 5: Build the project for the ARM target
    - name: Build
      env:
        PKG_CONFIG_PATH: "/usr/lib/aarch64-linux-gnu/pkgconfig"
        OPENCV_LINK_PATHS: "/usr/lib/aarch64-linux-gnu"
        OPENCV_LINK_LIBS: "opencv_core,opencv_imgproc,opencv_highgui"
        OPENCV_INCLUDE_PATHS: "/usr/include/opencv4"
      run: cargo build --release --target aarch64-unknown-linux-gnu

    # Step 6: Run tests (unit tests that don't require hardware)
    - name: Run tests
      run: cargo test --target x86_64-unknown-linux-gnu

    # Step 7: Upload the compiled binary as an artifact
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: rustspray-binary
        path: target/aarch64-unknown-linux-gnu/release/rustspraywa 
