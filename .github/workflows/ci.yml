name: CI

# Enhanced CI workflow for the cleaned-up Rust-Spray project
permissions:
  contents: read
  packages: read

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  RUST_LOG: debug

jobs:
  # Quick format and lint check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: lint-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            lint-${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libopencv-dev \
            clang \
            libclang-dev \
            pkg-config

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy analysis (host features)
        run: cargo clippy --all-targets --features host -- -D warnings

      - name: Clippy analysis (no features)
        run: cargo clippy --all-targets --no-default-features -- -D warnings

      - name: Clippy analysis (raspberry-pi features)
        run: cargo clippy --all-targets --features raspberry-pi -- -D warnings

  # Test on host (non-ARM) platform with OpenCV
  test-host:
    name: Test on Host Platform (with OpenCV)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: test-host-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-host-${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libopencv-dev \
            clang \
            libclang-dev \
            pkg-config

      - name: Build with host features
        run: cargo build --verbose --features host

      - name: Run tests with host features
        run: cargo test --verbose --features host

      - name: Test example compilation
        run: cargo check --example basic_usage --features host

      - name: Build documentation
        run: cargo doc --no-deps --features host

  # Build and test without any features
  test-no-features:
    name: Test with No Features
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: test-no-features-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-no-features-${{ runner.os }}-cargo-

      - name: Build with no features
        run: cargo build --verbose --no-default-features

      - name: Run tests with no features
        run: cargo test --verbose --no-default-features

  # Cross-compilation tests for ARM targets (without OpenCV)
  cross-compile:
    name: Cross-compile for ARM
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cross-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cross-${{ matrix.target }}-cargo-

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Cross-compile for ARM (debug)
        run: cross build --target ${{ matrix.target }} --verbose --features raspberry-pi

      - name: Cross-compile for ARM (release)
        run: cross build --target ${{ matrix.target }} --release --verbose --features raspberry-pi

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: security-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            security-${{ runner.os }}-cargo-

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run security audit
        run: cargo audit

  # Check that the project builds on our MSRV
  msrv:
    name: MSRV Check (1.70)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust 1.70 (MSRV)
        uses: dtolnay/rust-toolchain@1.70

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: msrv-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            msrv-${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libopencv-dev \
            clang \
            libclang-dev \
            pkg-config

      - name: Update lock file for MSRV
        run: cargo update

      - name: Test build with MSRV (host features)
        run: cargo check --features host

      - name: Test build with MSRV (no features)
        run: cargo check --no-default-features

  # Combined status check
  ci-success:
    name: CI Success
    if: always()
    needs:
      - lint
      - test-host
      - test-no-features
      - cross-compile
      - security
      - msrv
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check all jobs status
        run: |
          # Check if all required jobs succeeded
          jobs_status=("${{ needs.lint.result }}" "${{ needs.test-host.result }}" "${{ needs.test-no-features.result }}" "${{ needs.cross-compile.result }}" "${{ needs.security.result }}" "${{ needs.msrv.result }}")
          
          echo "Job results:"
          echo "  Lint: ${{ needs.lint.result }}"
          echo "  Test Host: ${{ needs.test-host.result }}"
          echo "  Test No Features: ${{ needs.test-no-features.result }}"
          echo "  Cross Compile: ${{ needs.cross-compile.result }}"
          echo "  Security: ${{ needs.security.result }}"
          echo "  MSRV: ${{ needs.msrv.result }}"
          
          # Check for any failed jobs
          for status in "${jobs_status[@]}"; do
            if [[ "$status" != "success" ]]; then
              echo "❌ CI pipeline failed - one or more jobs did not succeed"
              exit 1
            fi
          done
          
          echo "✅ All CI checks passed successfully!"
