name: CI

# Enhanced CI workflow for the cleaned-up Rust-Spray project
permissions:
  contents: read
  packages: read

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick format and lint check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install OpenCV dependencies
        run: |
          echo "Installing OpenCV dependencies..."
          sudo apt-get update
          sudo apt-get install -y libopencv-dev clang libclang-dev

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy analysis
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Test on host (non-ARM) platform
  test-host:
    name: Test on Host Platform (with OpenCV)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install OpenCV dependencies
        run: |
          echo "Installing OpenCV dependencies..."
          sudo apt-get update
          sudo apt-get install -y libopencv-dev clang libclang-dev

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ci-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build with host features
        run: cargo build --verbose --features host

      - name: Run tests with host features
        run: cargo test --verbose --features host

      - name: Test example compilation
        run: cargo check --example basic_usage --features host

      - name: Build documentation
        run: cargo doc --no-deps --all-features

  # Build and test on host without special features
  build-and-test-without-host:
    name: Build and Test on Host (no-features)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Test build with no features
        run: cargo check --no-default-features
      - name: Run tests with no features
        run: cargo test --no-default-features

  # Cross-compilation tests for ARM targets
  cross-compile:
    name: Cross-compile for ARM (no OpenCV)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Cross-compile for ARM
        run: cross build --target ${{ matrix.target }} --verbose --features raspberry-pi

      - name: Cross-compile release for ARM
        run: cross build --target ${{ matrix.target }} --release --verbose --features raspberry-pi

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Check that the project builds on our MSRV
  msrv:
    name: MSRV Check (1.70)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust 1.70 (MSRV)
        uses: dtolnay/rust-toolchain@1.70

      - name: Install OpenCV dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopencv-dev clang libclang-dev

      - name: Update lock file for MSRV
        run: cargo update

      - name: Test build with MSRV
        run: cargo check --features host

  # Combined status check
  ci-success:
    name: CI Success
    if: always()
    needs:
      - lint
      - test-host
      - build-and-test-without-host
      - cross-compile
      - security
      - msrv
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test-host.result }}" == "success" && \
                "${{ needs.build-and-test-without-host.result }}" == "success" && \
                "${{ needs.cross-compile.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.msrv.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi
