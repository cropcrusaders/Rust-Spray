name: RustSpray CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    # 1Ô∏è‚É£ Checkout repository
    - name: Checkout
      uses: actions/checkout@v4

       # 2Ô∏è‚É£ üîí Refresh & (optionally) commit Cargo.lock
    - name: Refresh Cargo.lock
      env:
        GH_TOKEN: ${{ secrets.PAT_PUSH }}
      run: |
        set -euo pipefail

        cargo generate-lockfile      # rewrites Cargo.lock if needed

        # When running in a fork or PR, just fail if the lock changed.
        if [[ "$GITHUB_REPOSITORY" != "CropCrusaders/Rust-Spray" ]]; then
          if ! git diff --quiet Cargo.lock; then
            echo "::error::Cargo.lock is stale. Run 'cargo generate-lockfile' and commit the change."
            exit 1
          fi
          exit 0
        fi

        # We‚Äôre in the main repo: auto-commit any changes.
        if git diff --quiet Cargo.lock; then
          echo "Cargo.lock already up-to-date."
          exit 0
        fi

        echo "Updating stale Cargo.lock and pushing commit‚Ä¶"
        git config user.name  "GitHub Actions"
        git config user.email "actions@github.com"
        git add Cargo.lock
        git commit -m "ci: refresh Cargo.lock [skip ci]"
        git push origin HEAD:${GITHUB_REF}

    # 3Ô∏è‚É£ Install stable Rust toolchain for host (x86_64)
    - name: Set up Rust (host)
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: clippy,rustfmt

    # 4Ô∏è‚É£ Cache host build artifacts
    - name: Cache cargo (host)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-host-${{ hashFiles('**/Cargo.lock') }}

    # 5Ô∏è‚É£ Clippy + fmt (optional static checks)
    - name: Lint (clippy)
      run: cargo clippy --all-targets --all-features -- -D warnings
    - name: Format check
      run: cargo fmt -- --check

    # 6Ô∏è‚É£ Run unit & integration tests on host
    - name: Unit tests (host)
      run: cargo test --all-targets --all-features

    # 7Ô∏è‚É£ Install cross-rs for cross-compilation
    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    # 8Ô∏è‚É£ Cache AArch64 build artifacts
    - name: Cache cargo (aarch64)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cross
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-aarch64-${{ hashFiles('**/Cargo.lock') }}

    # 9Ô∏è‚É£ Build release binary for Raspberry Pi (ARM64)
    - name: Build for aarch64-unknown-linux-gnu
      run: cross build --release --target aarch64-unknown-linux-gnu

    # üîü Upload the compiled ARM binary as an artifact
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: rustspray-aarch64
        path: target/aarch64-unknown-linux-gnu/release/rustspray
