jobs:
  release:
    name: Release – ${{ matrix.platform.os_name }}
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/tags/test-release'

    strategy:
      matrix:
        platform:
          # ───────────── existing targets ─────────────
          - os_name: FreeBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            bin: ubi
            name: ubi-FreeBSD-x86_64.tar.gz
            cross: true
            cargo_command: ./cross

          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: ubi
            name: ubi-Linux-x86_64-musl.tar.gz
            cross: false
            cargo_command: cargo

          - os_name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: ubi.exe
            name: ubi-Windows-aarch64.zip
            cross: false
            cargo_command: cargo

          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: ubi
            name: ubi-Darwin-x86_64.tar.gz
            cross: false
            cargo_command: cargo

          # ───────────── new Raspberry Pi targets ─────────────
          - os_name: RaspberryPi-armv7
            os: ubuntu-20.04
            target: armv7-unknown-linux-gnueabihf
            bin: ubi
            name: ubi-RaspberryPi-armv7.tar.gz
            cross: true
            cargo_command: ./cross      # provided by bootstrap‑ubi

          - os_name: RaspberryPi-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            bin: ubi
            name: ubi-RaspberryPi-aarch64.tar.gz
            cross: true
            cargo_command: ./cross      # provided by bootstrap‑ubi

    runs-on: ${{ matrix.platform.os }}

    steps:
      # 1️⃣  Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

      # 2️⃣  Setup Rust toolchain when NOT using cross
      - name: Install toolchain if not cross‑compiling
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
        if: ${{ !matrix.platform.cross }}

      # 3️⃣  Extra musl tools for native Linux static build
      - name: Install musl-tools on Linux
        run: sudo apt-get update -y && sudo apt-get install -y musl-tools
        if: contains(matrix.platform.os, 'ubuntu') && !matrix.platform.cross

      # 4️⃣  Install **cross** (POSIX)
      - name: Install cross if cross‑compiling (*nix)
        id: cross-nix
        shell: bash
        run: |
          set -e
          export TARGET="$HOME/bin"
          mkdir -p "$TARGET"
          ./bootstrap/bootstrap-ubi.sh
          "$HOME/bin/ubi" --project cross-rs/cross --matching musl --in .
        if: matrix.platform.cross && !contains(matrix.platform.os, 'windows')

      # 5️⃣  Install **cross** (Windows)
      - name: Install cross if cross‑compiling (Windows)
        id: cross-windows
        shell: powershell
        run: |
          .\bootstrap\bootstrap-ubi.ps1
          .\ubi --project cross-rs/cross --in .
        if: matrix.platform.cross && contains(matrix.platform.os, 'windows')

      # 6️⃣  Build binary (*nix)
      - name: Build binary (*nix)
        shell: bash
        run: |
          ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
        if: ${{ !contains(matrix.platform.os, 'windows') }}

      # 7️⃣  Build binary (Windows)
      - name: Build binary (Windows)
        shell: powershell
        run: |
          & ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
        if: contains(matrix.platform.os, 'windows')

      # 8️⃣  Strip binary where supported
      - name: Strip binary
        shell: bash
        run: |
          strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
        if: ${{ !(matrix.platform.cross || matrix.platform.target == 'aarch64-pc-windows-msvc') }}

      # 9️⃣  Package archive
      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          else
            tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          fi
          cd -

      # 🔟  Upload artifacts on test-release tag
      - name: Publish release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ubi-${{ matrix.platform.os_name }}
          path: "ubi*"
        if: github.ref == 'refs/tags/test-release'

      # 1️⃣1️⃣  Create draft release on real tags
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "ubi*"
          body_path: Changes.md
        if: startsWith(github.ref, 'refs/tags/v')
