name: RustSpray CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

# A single cache-key suffix for both jobs
env:
  CARGO_CACHE_KEY: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock','**/Cross.toml') }}

jobs:
  # ──────────────────────────────────────────────────────────────────────────────
  build-and-test:
    name: Host build, lint & tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1️⃣ Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2️⃣ Install host deps for clippy/tests
      - name: Install host dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            llvm-dev clang libclang-dev \
            libopencv-dev pkg-config

      # 3️⃣ Refresh Cargo.lock (auto-commit on main, fail on PRs)
      - name: Refresh Cargo.lock
        env:
          GH_TOKEN: ${{ secrets.PAT_PUSH }}
        run: |
          set -euo pipefail
          cargo generate-lockfile
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git diff --quiet Cargo.lock && exit 0
            echo "::error::Cargo.lock is stale. Run 'cargo generate-lockfile'."
            exit 1
          fi
          if ! git diff --quiet Cargo.lock; then
            git config user.name  "GitHub Actions"
            git config user.email "actions@github.com"
            git add Cargo.lock
            git commit -m "ci: refresh Cargo.lock [skip ci]"
            git push
          fi

      # 4️⃣ Toolchain setup
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy,rustfmt

      # 5️⃣ Cache cargo (host)
      - name: Cache cargo (host)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/debug
            target/release
          key: ${{ env.CARGO_CACHE_KEY }}-host

      # 6️⃣ Lint, fmt & tests
      - name: Clippy
        env: { OPENCV_PKGCONFIG_NAME: opencv4 }
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Format check
        run: cargo fmt -- --check

      - name: Unit tests
        env: { OPENCV_PKGCONFIG_NAME: opencv4 }
        run: cargo test --all-targets --all-features

  # ──────────────────────────────────────────────────────────────────────────────
  build-pi:
    name: Cross-build for aarch64 (Raspberry Pi)
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # Force pulling fresh cross images
      CROSS_SKIP_LOCAL_IMAGE: true
      # Same cache key as above
      CARGO_CACHE_KEY: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock','**/Cross.toml') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Cache for cross build
      - name: Cache cargo (aarch64)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cross
            ~/.cargo/registry
            ~/.cargo/git
            target/aarch64-unknown-linux-gnu
          key: ${{ env.CARGO_CACHE_KEY }}-aarch64

      # Install pinned cross
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.4

      # Build the Pi binary
      - name: Build (aarch64-unknown-linux-gnu)
        run: cross build --release --target aarch64-unknown-linux-gnu

      # Upload the artifact
      - name: Upload Pi binary
        uses: actions/upload-artifact@v4
        with:
          name: rustspray-aarch64
          path: target/aarch64-unknown-linux-gnu/release/rustspray
