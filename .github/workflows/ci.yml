name: ubi_multi_platform_build_and_release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build - ${{ matrix.platform.os_name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          # Desktop targets
          - os_name: FreeBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            bin: ubi
            artifact_name: ubi-FreeBSD-x86_64.tar.gz
            cross: true
            cargo_cmd: ./cross

          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: ubi
            artifact_name: ubi-Linux-x86_64-musl.tar.gz
            cross: false
            cargo_cmd: cargo

          - os_name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: ubi.exe
            artifact_name: ubi-Windows-aarch64.zip
            cross: false
            cargo_cmd: cargo

          - os_name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            bin: ubi
            artifact_name: ubi-Darwin-x86_64.tar.gz
            cross: false
            cargo_cmd: cargo

          # Raspberry Pi targets
          - os_name: RaspberryPi-armv7
            os: ubuntu-22.04
            target: armv7-unknown-linux-gnueabihf
            bin: ubi
            artifact_name: ubi-RaspberryPi-armv7.tar.gz
            cross: false
            cargo_cmd: cargo

          - os_name: RaspberryPi-aarch64
            os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            bin: ubi
            artifact_name: ubi-RaspberryPi-aarch64.tar.gz
            cross: false
            cargo_cmd: cargo

    steps:

      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Install stable Rust toolchain
      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      # 3. If building for Pi, fix apt sources
      - name: Configure apt for Pi
        if: startsWith(matrix.platform.os_name, 'RaspberryPi')
        run: |
          if [ "${{ matrix.platform.os_name }}" = "RaspberryPi-armv7" ]; then
            sudo dpkg --add-architecture armhf
          else
            sudo dpkg --add-architecture arm64
          fi

          # Pin default apt sources to amd64
          sudo sed -i 's#^deb http://#deb [arch=amd64] http://#g' /etc/apt/sources.list
          sudo sed -i 's#^deb http://#deb [arch=amd64] http://#g' /etc/apt/sources.list.d/*.list || true

          # Add ports.ubuntu.com lines
          CODENAME=$(lsb_release -cs)
          if [ "${{ matrix.platform.os_name }}" = "RaspberryPi-armv7" ]; then
            sudo tee /etc/apt/sources.list.d/ports-armhf.list <<EOF
deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $CODENAME main restricted universe multiverse
deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $CODENAME-updates main restricted universe multiverse
deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $CODENAME-security main restricted universe multiverse
deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $CODENAME-backports main restricted universe multiverse
EOF
          else
            sudo tee /etc/apt/sources.list.d/ports-arm64.list <<EOF
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $CODENAME main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $CODENAME-updates main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $CODENAME-security main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $CODENAME-backports main restricted universe multiverse
EOF
          fi

          sudo apt-get update -y

      # 4. Install musl if needed
      - name: Install musl-tools
        if: matrix.platform.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y musl-tools

      # 5. Install cross if needed (FreeBSD build)
      - name: Install cross
        if: matrix.platform.cross && !contains(matrix.platform.os, 'windows')
        run: |
          sudo apt-get update -y
          cargo install cross

      # 6. If Pi, install toolchains & OpenCV
      - name: Pi armv7 toolchain
        if: matrix.platform.os_name == 'RaspberryPi-armv7'
        run: |
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libopencv-dev:armhf pkg-config
          mkdir -p .cargo
          cat >> .cargo/config.toml <<EOF
[target.armv7-unknown-linux-gnueabihf]
linker = "arm-linux-gnueabihf-gcc"
EOF

      - name: Pi aarch64 toolchain
        if: matrix.platform.os_name == 'RaspberryPi-aarch64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libopencv-dev:arm64 pkg-config
          mkdir -p .cargo
          cat >> .cargo/config.toml <<EOF
[target.aarch64-unknown-linux-gnu]
linker = "aarch64-linux-gnu-gcc"
EOF

      # 7. Build
      - name: Build (Unix)
        if: ${{ !contains(matrix.platform.os, 'windows') }}
        env:
          PKG_CONFIG_ALLOW_CROSS: ${{ startsWith(matrix.platform.os_name, 'RaspberryPi') && '1' || '' }}
          PKG_CONFIG_LIBDIR: ${{ matrix.platform.os_name == 'RaspberryPi-armv7' && '/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/share/pkgconfig' || matrix.platform.os_name == 'RaspberryPi-aarch64' && '/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig' || '' }}
          PKG_CONFIG_SYSROOT_DIR: '/'
        run: |
          ${{ matrix.platform.cargo_cmd }} build --release --locked --target ${{ matrix.platform.target }}

      - name: Build (Windows)
        if: contains(matrix.platform.os, 'windows')
        shell: powershell
        run: |
          & ${{ matrix.platform.cargo_cmd }} build --release --locked --target ${{ matrix.platform.target }}

      # 8. Strip (where possible)
      - name: Strip
        if: ${{ !(matrix.platform.cross || matrix.platform.target == 'aarch64-pc-windows-msvc') }}
        run: |
          strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}

      # 9. Package
      - name: Package artifact
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.platform.artifact_name }} ${{ matrix.platform.bin }}
          else
            tar czf ../../../${{ matrix.platform.artifact_name }} ${{ matrix.platform.bin }}
          fi
          cd -

      - uses: actions/upload-artifact@v4
        with:
          name: ubi-${{ matrix.platform.os_name }}-${{ github.sha }}
          path: ${{ matrix.platform.artifact_name }}

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - run: |
          mkdir -p uploads
          find dist/ -name 'ubi-*.tar.gz' -o -name 'ubi-*.zip' -exec mv {} uploads/ \;
      - uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: 'uploads/**'
