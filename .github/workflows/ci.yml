name: RustSpray CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest         # ubuntu-24.04 image
    timeout-minutes: 30

    steps:
    # 1Ô∏è‚É£  Checkout
    - name: Checkout
      uses: actions/checkout@v4

    # 2Ô∏è‚É£  System libraries for clang-sys *and* opencv-rust
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          llvm-dev clang libclang-dev \
          libopencv-dev pkg-config

    # 3Ô∏è‚É£  Refresh Cargo.lock (auto-commit on main, fail on PRs if stale)
    - name: Refresh Cargo.lock
      env:
        GH_TOKEN: ${{ secrets.PAT_PUSH }}
      run: |
        set -euo pipefail
        cargo generate-lockfile
        if [[ "$GITHUB_REPOSITORY" != "CropCrusaders/Rust-Spray" || "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          git diff --quiet Cargo.lock && exit 0
          echo "::error::Cargo.lock is stale. Run 'cargo generate-lockfile'."
          exit 1
        fi
        if ! git diff --quiet Cargo.lock; then
          git config user.name  "GitHub Actions"
          git config user.email "actions@github.com"
          git add Cargo.lock
          git commit -m "ci: refresh Cargo.lock [skip ci]"
          git push origin HEAD:${GITHUB_REF}
        fi

    # 4Ô∏è‚É£  Rust toolchain for host
    - name: Set up Rust (host)
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: clippy,rustfmt

    # 5Ô∏è‚É£  Cache host artefacts
    - name: Cache cargo (host)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/debug
          target/release
        key: ${{ runner.os }}-cargo-host-${{ hashFiles('**/Cargo.lock') }}

    # 6Ô∏è‚É£  Lint / fmt / tests on host ‚Äî point opencv-rust at opencv4.pc
    - name: Lint (clippy)
      env:
        OPENCV_PKGCONFIG_NAME: opencv4
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Format check
      run: cargo fmt -- --check

    - name: Unit tests (host)
      env:
        OPENCV_PKGCONFIG_NAME: opencv4
      run: cargo test --all-targets --all-features

    # 7Ô∏è‚É£  Install cross for ARM64 build

     - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.4
  
    # 8Ô∏è‚É£  Cache ARM artefacts
    - name: Cache cargo (aarch64)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cross
          ~/.cargo/registry
          ~/.cargo/git
          target/aarch64-unknown-linux-gnu
        key: ${{ runner.os }}-cargo-aarch64-${{ hashFiles('**/Cargo.lock') }}

    # 9Ô∏è‚É£  Build release binary for ARM64
    - name: Build (aarch64-unknown-linux-gnu)
      env:
        OPENCV_PKGCONFIG_NAME: opencv4   # usually not needed for cross image, but harmless
      run: cross build --release --target aarch64-unknown-linux-gnu

    # üîü  Upload the binary
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: rustspray-aarch64
        path: target/aarch64-unknown-linux-gnu/release/rustspray
