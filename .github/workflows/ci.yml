name: RustSpray CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Host-side deps (for clippy, unit tests)
      - name: Install host dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            llvm-dev clang libclang-dev \
            libopencv-dev pkg-config

      # 3Ô∏è‚É£ Refresh Cargo.lock (auto-commit on main, fail on PRs)
      - name: Refresh Cargo.lock
        env: { GH_TOKEN: ${{ secrets.PAT_PUSH }} }
        run: |
          set -euo pipefail
          cargo generate-lockfile
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git diff --quiet Cargo.lock && exit 0
            echo "::error::Cargo.lock is stale. Run 'cargo generate-lockfile'."
            exit 1
          fi
          if ! git diff --quiet Cargo.lock; then
            git config user.name  "GitHub Actions"
            git config user.email "actions@github.com"
            git add Cargo.lock
            git commit -m "ci: refresh Cargo.lock [skip ci]"
            git push
          fi

      # 4Ô∏è‚É£ Toolchain
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy,rustfmt

      # 5Ô∏è‚É£ Cache (host)
      - name: Cache cargo (host)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/debug
            target/release
          key: ${{ runner.os }}-cargo-host-${{ hashFiles('**/Cargo.lock') }}

      # 6Ô∏è‚É£ Lint ‚Ä¢ fmt ‚Ä¢ tests
      - name: Clippy
        env: { OPENCV_PKGCONFIG_NAME: opencv4 }
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Format check
        run: cargo fmt -- --check

      - name: Unit tests
        env: { OPENCV_PKGCONFIG_NAME: opencv4 }
        run: cargo test --all-targets --all-features

      # 7Ô∏è‚É£ Install cross
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.4

      # 8Ô∏è‚É£ Cache (cross / aarch64)
      - name: Cache cargo (aarch64)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cross
            ~/.cargo/registry
            ~/.cargo/git
            target/aarch64-unknown-linux-gnu
          key: ${{ runner.os }}-cargo-aarch64-${{ hashFiles('Cross.toml') }}-${{ hashFiles('**/Cargo.lock') }}

      # 9Ô∏è‚É£ Build Pi binary
      - name: Build (aarch64-unknown-linux-gnu)
        run: cross build --release --target aarch64-unknown-linux-gnu

      # üîü Upload artefact
      - name: Upload Pi binary
        uses: actions/upload-artifact@v4
        with:
          name: rustspray-aarch64
          path: target/aarch64-unknown-linux-gnu/release/rustspray
