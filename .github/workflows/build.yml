name: Build and Release

permissions:
  contents: write
  packages: read

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            arch: arm64
            features: with-rppal  # Build without OpenCV for cross-compilation
          - target: armv7-unknown-linux-gnueabihf
            arch: armv7
            features: with-rppal  # Build without OpenCV for cross-compilation
            continue-on-error: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross CLI from Git
        # The cross crate is no longer published on crates.io.
        # Install straight from the repository and lock dependencies.
        run: cargo install --git https://github.com/cross-rs/cross cross --locked

      - name: Add cargo bin to PATH
        run: echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: +8 GB swap to survive clang
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 8

      - name: Build
        env:
          PKG_CONFIG_ALLOW_CROSS: "1"
          CARGO_INCREMENTAL: "0"                 # still saves memory
        run: cross build --release --target ${{ matrix.target }} --features ${{ matrix.features }} --verbose

      - name: Install cargo-deb
        if: github.event_name == 'release'
        run: cargo install cargo-deb --locked

      - name: Run tests with cross (if supported)
        env:
          PKG_CONFIG_ALLOW_CROSS: "1"
        continue-on-error: true  # Some cross-compiled tests may not run
        run: cross test --target ${{ matrix.target }} --features ${{ matrix.features }}

      - name: Upload artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: rustspray-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/rustspray

      - name: Build Debian package
        if: github.event_name == 'release'
        run: cargo deb --no-build --target ${{ matrix.target }}

      - name: Upload Debian package
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ matrix.target }}/debian/rustspray_*.deb
          asset_name: rustspray_${{ github.event.release.tag_name }}_${{ matrix.arch }}.deb
          asset_content_type: application/vnd.debian.binary-package
