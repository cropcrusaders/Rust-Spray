name: Quick Tests

# Fast workflow for basic checks on every commit
permissions:
  contents: read
  packages: read

on:
  push:
    branches: ["develop"]  # Only trigger on develop branch
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  quick-test:
    name: Quick Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install OpenCV dependencies
        run: |
          echo "Installing OpenCV dependencies..."
          sudo apt-get update
          if ! sudo apt-get install -y \
            libopencv-dev \
            libopencv-core-dev \
            libopencv-imgproc-dev \
            libopencv-highgui-dev \
            libopencv-imgcodecs-dev \
            libopencv-videoio-dev \
            libopencv-objdetect-dev \
            clang \
            libclang-dev \
            pkg-config; then
            echo "❌ Failed to install OpenCV dependencies"
            echo "This will likely cause build failures"
            exit 1
          fi
          echo "✅ OpenCV dependencies installed successfully"

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: test-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy analysis
        run: cargo clippy --all-targets -- -D warnings

      - name: Build library
        run: cargo build --lib

      - name: Build main application (without GPIO)
        run: cargo build --bin rustspray

      - name: Build example
        run: cargo build --example basic_usage

      - name: Run unit tests
        run: cargo test --lib

      - name: Run integration tests
        run: cargo test --test integration_tests

      - name: Test documentation
        run: cargo doc --no-deps

      - name: Check with different feature combinations
        run: |
          echo "Testing default features..."
          cargo check
          
          echo "Testing with picam feature..."
          cargo check --features picam
          
          echo "Testing library as dependency..."
          cargo check --lib

  config-validation:
    name: Configuration Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install OpenCV dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopencv-dev clang libclang-dev

      - name: Test config loading
        run: |
          # Create a test config
          mkdir -p config
          cp config/Config.toml config/test_config.toml
          
          # Build and test config validation
          cargo build --lib
          cargo test test_config_loading
          cargo test test_config_validation
          cargo test test_valid_config

      - name: Validate example configs
        run: |
          # Test that the example config is valid
          if [ -f "config/Config.toml" ]; then
            echo "✅ Example config found"
          else
            echo "⚠️  No example config found"
          fi
