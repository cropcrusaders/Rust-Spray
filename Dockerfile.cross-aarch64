# Multi-stage build container for cross compiling Rust-Spray
# and OpenCV for aarch64 Linux targets

# ------------------------------------------------------------
# Stage 1 - Build OpenCV for aarch64
# ------------------------------------------------------------
FROM ubuntu:22.04 AS opencv-build

# Declare build arguments in this stage
ARG OPENCV_VERSION=4.11.0
ARG CMAKE_BUILD_TYPE=Release

# Configure tzdata non-interactively so builds do not block waiting for
# timezone selection when any package pulls it in as a dependency.
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Australia/Brisbane
# Configure timezone
RUN apt-get update && \
    apt-get install -y --no-install-recommends tzdata && \
    ln -fs /usr/share/zoneinfo/${TZ} /etc/localtime && \
    echo ${TZ} > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata && \
    rm -rf /var/lib/apt/lists/*

# Install cross compile toolchain and build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
        cmake ninja-build git pkg-config \
        libgtk-3-dev libjpeg-dev libpng-dev libtiff-dev \
        libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
        libxvidcore-dev libx264-dev gfortran libtbb2 libtbb-dev \
        libatlas-base-dev libdc1394-dev && \
    rm -rf /var/lib/apt/lists/*

ENV CC=aarch64-linux-gnu-gcc
ENV CXX=aarch64-linux-gnu-g++

WORKDIR /opt
# Configure git to handle SSL certificates and clone OpenCV
RUN git config --global http.sslverify false && \
    git clone --depth 1 -b "${OPENCV_VERSION}" https://github.com/opencv/opencv.git && \
    mkdir build && cd build && \
    cmake -G Ninja ../opencv \
        -DCMAKE_INSTALL_PREFIX=/opt/opencv \
        -DCMAKE_SYSTEM_NAME=Linux \
        -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
        -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
        -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
        -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
        -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
        -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
        -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
        -DBUILD_LIST=core,imgproc,highgui,imgcodecs,videoio \
        -DBUILD_SHARED_LIBS=ON \
        -DWITH_IPP=OFF \
        -DWITH_GTK=OFF \
        -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" && \
    ninja -j$(nproc) && ninja install

# Create pkg-config files for OpenCV
RUN mkdir -p /opt/opencv/lib/pkgconfig && \
    printf 'prefix=/opt/opencv\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/lib\nincludedir=${prefix}/include\n\nName: OpenCV\nDescription: Open Source Computer Vision Library\nVersion: 4.11.0\nLibs: -L${libdir} -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lopencv_videoio\nCflags: -I${includedir}/opencv4\n' > /opt/opencv/lib/pkgconfig/opencv4.pc && \
    printf 'prefix=/opt/opencv\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/lib\nincludedir=${prefix}/include\n\nName: OpenCV\nDescription: Open Source Computer Vision Library\nVersion: 4.11.0\nLibs: -L${libdir} -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lopencv_videoio\nCflags: -I${includedir}/opencv4\n' > /opt/opencv/lib/pkgconfig/opencv.pc

# ------------------------------------------------------------
# Stage 2 - Build Rust project using cross
# ------------------------------------------------------------
FROM ubuntu:22.04 AS rust-build

# Install cross-compilation tools and dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        curl build-essential pkg-config ca-certificates \
        gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
        clang llvm-dev libclang-dev && \
    rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:$PATH"

# Add aarch64 target for direct cargo cross-compilation
RUN . ~/.cargo/env && \
    rustup target add aarch64-unknown-linux-gnu

# Set up cross-compilation environment variables
ENV CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
ENV CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
ENV AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc

# Copy OpenCV from the build stage
COPY --from=opencv-build /opt/opencv /opt/opencv
ENV PKG_CONFIG_PATH=/opt/opencv/lib/pkgconfig
ENV PKG_CONFIG_ALLOW_CROSS=1

WORKDIR /workspace
COPY . /workspace

# Build the Rust project for aarch64 using direct cargo cross-compilation
# Set additional OpenCV environment variables for cross-compilation
ENV OPENCV_LINK_LIBS=opencv_core,opencv_imgproc,opencv_highgui,opencv_imgcodecs,opencv_videoio
ENV OPENCV_LINK_PATHS=/opt/opencv/lib

# Build Rust application
RUN . ~/.cargo/env && \
    cargo build --release --target aarch64-unknown-linux-gnu

# ------------------------------------------------------------
# Stage 3 - Runtime image
# ------------------------------------------------------------
FROM ubuntu:22.04 AS runtime
COPY --from=opencv-build /opt/opencv /opt/opencv
COPY --from=rust-build /workspace/target/aarch64-unknown-linux-gnu/release/rustspray /usr/local/bin/rustspray
ENV LD_LIBRARY_PATH=/opt/opencv/lib
CMD ["/usr/local/bin/rustspray"]

