# Multi-stage build container for cross compiling Rust-Spray
# and OpenCV for aarch64 Linux targets

# ------------------------------------------------------------
# Stage 1 - Build OpenCV for aarch64
# ------------------------------------------------------------
ARG OPENCV_VERSION=4.11.0
ARG CMAKE_BUILD_TYPE=Release
FROM ubuntu:22.04 AS opencv-build

# Configure tzdata non-interactively so builds do not block waiting for
# timezone selection when any package pulls it in as a dependency.
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Australia/Brisbane
RUN apt-get update && \
    apt-get install -y --no-install-recommends tzdata && \
    ln -fs /usr/share/zoneinfo/${TZ} /etc/localtime && \
    echo ${TZ} > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata && \
    rm -rf /var/lib/apt/lists/*

# Install cross compile toolchain and build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
        cmake ninja-build git pkg-config \
        libgtk-3-dev libjpeg-dev libpng-dev libtiff-dev \
        libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
        libxvidcore-dev libx264-dev gfortran libtbb2 libtbb-dev \
        libatlas-base-dev libdc1394-22-dev && \
    rm -rf /var/lib/apt/lists/*

ENV CC=aarch64-linux-gnu-gcc
ENV CXX=aarch64-linux-gnu-g++

WORKDIR /opt
RUN git clone --depth 1 -b ${OPENCV_VERSION} https://github.com/opencv/opencv.git && \
    mkdir build && cd build && \
    cmake -G Ninja ../opencv \
        -DCMAKE_INSTALL_PREFIX=/opt/opencv \
        -DBUILD_LIST=core,imgproc,highgui,imgcodecs \
        -DBUILD_SHARED_LIBS=ON \
        -DWITH_IPP=OFF \
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} && \
    ninja -j$(nproc) && ninja install

# ------------------------------------------------------------
# Stage 2 - Build Rust project using cross
# ------------------------------------------------------------
FROM ghcr.io/cross-rs/aarch64-unknown-linux-gnu:main AS rust-build

# Cross-rs images come with pre-configured Rust toolchain for the target
# Cross-rs images are designed to be used with the cross tool
# They don't necessarily have cargo available directly 
# Install Rust toolchain for building
RUN apt-get update && apt-get install -y curl
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
RUN cargo --version && rustc --version

COPY --from=opencv-build /opt/opencv /opt/opencv
ENV PKG_CONFIG_PATH=/opt/opencv/lib/pkgconfig

WORKDIR /workspace
COPY . /workspace

RUN cargo build --release

# ------------------------------------------------------------
# Stage 3 - Runtime image
# ------------------------------------------------------------
FROM ubuntu:22.04 AS runtime
COPY --from=opencv-build /opt/opencv /opt/opencv
COPY --from=rust-build /workspace/target/release/rustspray /usr/local/bin/rustspray
ENV LD_LIBRARY_PATH=/opt/opencv/lib
CMD ["/usr/local/bin/rustspray"]

