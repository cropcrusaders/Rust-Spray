# ------------------------------------------------------------
# Stage 1 - Build OpenCV for armv7
# ------------------------------------------------------------
ARG OPENCV_VERSION=4.11.0
ARG CMAKE_BUILD_TYPE=Release
FROM ubuntu:22.04 AS opencv-build
ARG OPENCV_VERSION
ARG CMAKE_BUILD_TYPE

# Configure tzdata non-interactively to avoid prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Australia/Brisbane

RUN apt-get update && \
    apt-get install -y --no-install-recommends tzdata && \
    ln -fs /usr/share/zoneinfo/${TZ} /etc/localtime && \
    echo ${TZ} > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata && \
    rm -rf /var/lib/apt/lists/*

# Install required dependencies for OpenCV
RUN apt-get update && apt-get install -y --no-install-recommends \
        ca-certificates \
        gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
        cmake ninja-build git pkg-config \
        libgtk-3-dev libjpeg-dev libpng-dev libtiff-dev \
        libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
        libxvidcore-dev libx264-dev gfortran libtbb2 libtbb-dev \
        libatlas-base-dev libdc1394-dev libunwind-dev \
        python3-dev python3-numpy && \
    rm -rf /var/lib/apt/lists/*

ENV CC=arm-linux-gnueabihf-gcc
ENV CXX=arm-linux-gnueabihf-g++

# Build and install OpenCV for ARMv7
WORKDIR /opt
RUN git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv.git && \
    git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv_contrib.git && \
    mkdir build && cd build && \
    cmake -G Ninja ../opencv \
        -DCMAKE_INSTALL_PREFIX=/opt/opencv \
        -DBUILD_LIST=core,imgproc,highgui,imgcodecs,videoio,objdetect \
        -DBUILD_SHARED_LIBS=ON \
        -DWITH_IPP=OFF \
        -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc \
        -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ \
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
        -DOPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
        -DOPENCV_GENERATE_PKGCONFIG=ON \
        -DOPENCV_ENABLE_NONFREE=ON \
        -DENABLE_PRECOMPILED_HEADERS=OFF \
        -DBUILD_opencv_legacy=OFF && \
    ninja -j$(nproc) && ninja install

# Copy OpenCV libraries and pkg-config file to sysroot
RUN mkdir -p /arm-linux-gnueabihf/lib && \
    cp -r /opt/opencv/lib/* /arm-linux-gnueabihf/lib/ && \
    mkdir -p /arm-linux-gnueabihf/include && \
    cp -r /opt/opencv/include/* /arm-linux-gnueabihf/include/ && \
    mkdir -p /arm-linux-gnueabihf/lib/pkgconfig && \
    cp /opt/opencv/lib/pkgconfig/opencv4.pc /arm-linux-gnueabihf/lib/pkgconfig/ && \
    sed -i 's|^prefix=.*|prefix=/usr/arm-linux-gnueabihf|' /arm-linux-gnueabihf/lib/pkgconfig/opencv4.pc

# ------------------------------------------------------------
# Stage 2 - Build Rust project using cross
# ------------------------------------------------------------
ARG RUST_TOOLCHAIN=stable
FROM ghcr.io/cross-rs/armv7-unknown-linux-gnueabihf:edge AS rust-build
ARG RUST_TOOLCHAIN

# Ensure rustup is available in PATH
ENV PATH="/root/.cargo/bin:${PATH}"

RUN rustup default ${RUST_TOOLCHAIN}
RUN cargo install --git https://github.com/cross-rs/cross cross --locked

COPY --from=opencv-build /opt/opencv /opt/opencv
ENV PKG_CONFIG_PATH=/opt/opencv/lib/pkgconfig

WORKDIR /workspace
COPY . /workspace

RUN cross build --release --target armv7-unknown-linux-gnueabihf

# ------------------------------------------------------------
# Stage 3 - Runtime image
# ------------------------------------------------------------
FROM ubuntu:22.04 AS runtime
COPY --from=opencv-build /opt/opencv /opt/opencv
COPY --from=rust-build /workspace/target/armv7-unknown-linux-gnueabihf/release/rustspray /usr/local/bin/rustspray
ENV LD_LIBRARY_PATH=/opt/opencv/lib
CMD ["/usr/local/bin/rustspray"]
